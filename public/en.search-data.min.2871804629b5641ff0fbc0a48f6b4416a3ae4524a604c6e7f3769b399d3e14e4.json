[{"id":0,"href":"/docs/%E4%BB%8B%E7%BB%8D/","title":"介绍","section":"Docs","content":"\r介绍\r#\r教程目的\r#\r厦门大学EDA全流程教学，分为前端和后端两部分\n前端： 包含VCS仿真、Verdi侦错、DC逻辑综合、Formality形式验证和PrimeTime静态时序分析，输出工艺相关的网表文件。\n后端： 后端设计流程学习。包括Floorplanning and Partitioning、Placement、Clock-tree Synthesis、Routing、Physical Verification、Static timing analysis和Formal Check，输出GDSII文件。\n使用工具\r#\rVCS、Verdi、DesignCompiler、Innovus、Calibre、Volutus\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n**Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\rstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r**Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat\rstringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r"},{"id":1,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"\rIntroduction\r#\rThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026#34;2014-09-28\u0026#34;\rtitle = \u0026#34;creating a new theme\u0026#34;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026#34;2014-09-28\u0026#34;\rtitle = \u0026#34;creating a new theme\u0026#34;\r+++\rbah and humbug\r$ Some Definitions\r#\rThere are a few concepts that you need to understand before creating a theme.\nSkins\r#\rSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page\r#\rThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File\r#\rWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent\r#\rContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter\r#\rThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown\r#\rContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files\r#\rHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template\r#\rA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template\r#\rA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template\r#\rA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site\r#\rLet\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site\r#\rRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site\r#\rVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme\r#\rHugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton\r#\rUse the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026#34;michael d henderson\u0026#34;\rdescription = \u0026#34;a minimal working template\u0026#34;\rlicense = \u0026#34;MIT\u0026#34;\rname = \u0026#34;zafta\u0026#34;\rsource_repo = \u0026#34;\u0026#34;\rtags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$ Update the Configuration File to Use the Theme\r#\rNow that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026#34;zafta\u0026#34;\rbaseurl = \u0026#34;\u0026#34;\rlanguageCode = \u0026#34;en-us\u0026#34;\rtitle = \u0026#34;zafta - totally refreshing\u0026#34;\rMetaDataFormat = \u0026#34;toml\u0026#34;\r:wq\r$ Generate the Site\r#\rNow that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page\r#\rHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static\r#\rHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle\r#\rWhen you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory\r#\rWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option\r#\rHugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload\r#\rHugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands\r#\rUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms Update the Home Page Template\r#\rThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page\r#\rRight now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$ Build the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload\r#\rNote: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page\r#\r\u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts\r#\rNow that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026#34;\u0026#34;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026#34;\u0026#34;\rTags = []\rdate = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34;\rtitle = \u0026#34;first\u0026#34;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026#34;\u0026#34;\rTags = []\rdate = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34;\rtitle = \u0026#34;second\u0026#34;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates\r#\rIn Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage\r#\rThe home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts\r#\rWe\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File\r#\r$ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$ Build the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content\r#\rThe posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Create a Post Listing\r#\rWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages\r#\rLet\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026#34;about\u0026#34;\rdescription = \u0026#34;about this site\u0026#34;\rdate = \u0026#34;2014-09-27\u0026#34;\rslug = \u0026#34;about time\u0026#34;\r+++\r## about us\ri\u0026#39;m speechless\r:wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39;\r+ (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0]\r+ \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39;\r+ \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026#34;post\u0026#34;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026#34;page\u0026#34; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026#34;/:title/\u0026#34;\rabout = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates\r#\rIf you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials\r#\rIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq Update the Home Page Template to Use the Partials\r#\rThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026#34;post\u0026#34;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials\r#\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts\r#\rIt\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template\r#\rWe\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself\r#\rDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":2,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":"\rMove static content to static\r#\rJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\rshould become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\rAdditionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file\r#\rHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site\r#\rThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\rOr, change the Hugo configuration to use _site instead of public.\n{\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\rConvert Jekyll templates to Hugo templates\r#\rThat\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes\r#\rJekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation\r#\rAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\ris written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\rUsage\r#\rI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\rto this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\rAs a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches\r#\rFix content\r#\rDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up\r#\rYou\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff\r#\rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":3,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/","title":"前端设计","section":"Docs","content":"\r介绍\r#\r前端设计流程，主要使用VCS仿真、Verdi侦错、DC逻辑综合、Formality形式验证和PrimeTime静态时序分析\n"},{"id":4,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/vcs%E4%B8%8Everdi/%E8%AE%B2%E4%B9%89/","title":"讲义","section":"Vcs与 Verdi","content":"\rVCS与Verdi\r#\rVCS与Verdi简介\r#\rVCS全称Verilog Compiler Simulator，是Synoposys家的编译型Verilog模拟器，可编译 C、C++、Verilog、SystemVerilog 等文件，编译后生成 simv 可执行文件进行仿真。 Verdi 最开始是由 novas 公司设计的，2012 年由 Synopsys 公司间接收购。除了源代码浏览器的标准功能（原理图、状态机图和波形比较），Verdi 平台还具有自动跟踪信号活动的高级功能。Verdi 主要用于仿真波形的查看，有助于快速定位和解决设计错误，加速 IC 设计流程。 Verilog测试激励\r#\r在硬件设计中，Verilog测试激励（Testbench）用于验证设计的正确性。通过创建一个模拟环境，给设计提供输入并捕获输出结果。测试激励通常包含时钟、复位、输入信号的驱动，输出信号的监控，以及用于调试的打印信息等。 Verilog中的测试激励可以使用各种系统函数和任务进行调试和输出。以下是一些常见的系统任务和函数。\n常见系统任务和函数\r#\r$timescale\n$timescale用于指定时间单位和时间精度的系统任务。它决定仿真中时间步长的单位，比如1ns/1ps表示时间单位为1纳秒，精度为1皮秒。它通常位于模块定义的开头。例如：\n`timescale 1ns / 1ps $display\n$display在仿真时打印消息到控制台，类似于C语言中的printf。它可以用于输出信号的状态、调试信息等。例如：\n$display(\u0026#34;Time = %0t, Signal = %b\u0026#34;, $time, signal); $monitor\n$monitor是用于持续监视信号变化的系统任务。它在仿真中每当监控的信号变化时自动打印出相应的消息。例如：\n$monitor(\u0026#34;Time = %0t, Signal = %b\u0026#34;, $time, signal); $finish\n$finish用于结束仿真。当仿真达到某个特定条件时，调用$finish可以终止仿真。例如：\nif (done) $finish; $time\n$time是返回当前仿真时间的系统函数。通常与$display、$monitor结合使用，以打印出时间信息。例如：\n$display(\u0026#34;Current time: %0t\u0026#34;, $time); $stop\n$stop暂停仿真，通常用于手动调试。与$finish不同的是，$stop不会完全结束仿真，只是暂时中断，可以通过仿真器继续。例如：\nif (error_condition) $stop; 示例\r#\r以下是一个简单的Verilog测试激励示例，它测试一个简单的计数器模块。\n`timescale 1ns / 1ps module tb_counter(); reg clk; reg rst; wire [3:0] count; // 实例化被测模块 counter dut ( .clk(clk), .rst(rst), .count(count) ); // 生成时钟 always #5 clk = ~clk; initial begin // 初始化信号 clk = 0; rst = 1; #10 rst = 0; // 复位信号拉低 // 仿真持续100ns后结束 #100 $finish; end // 监控输出 initial begin $monitor(\u0026#34;Time: %0t, Reset: %b, Count: %d\u0026#34;, $time, rst, count); end endmodule 这个测试激励模块使用了$timescale设置时间单位和精度，$monitor来监视输出信号的变化，并通过$finish在100纳秒后终止仿真。\n检查Verilog仿真结果\r#\r$display 项目后期可以用log进行debug比较方便 看波形（VCD或FSDB） 项目早期使用，各种信号比较详细 波形方式：\nVCD波形\n概述：VCD（Value Change Dump）是IEEE标准的波形文件格式，广泛支持，适用于各种仿真工具。 生成方法： 使用 $dumpfile 指定输出的VCD文件名，例如：$dumpfile(\u0026quot;waveform.vcd\u0026quot;);。 使用 $dumpvars 指定需要记录的信号，一般在仿真开始时调用，例：$dumpvars(0, top_module);。 优点： 标准化格式，兼容性好，支持多种仿真工具查看波形。 生成较为简单，适合小型设计及快速仿真验证。 缺点： 文件体积较大，仿真时间长时会消耗大量磁盘空间。 支持的信号类型和压缩率有限，难以处理大规模设计。 使用建议： 在项目早期阶段或较小规模设计中，使用VCD格式方便快速查看和分析波形变化。 通过限制 $dumpvars 中的层级或具体信号范围来控制文件大小。 FSDB波形\n概述：FSDB（Fast Signal Database）是Synopsys的专有波形格式，通常用于较大规模设计和复杂仿真，配合Verdi等工具使用。 生成方法： 使用 $fsdbDumpfile 来设置输出文件，例如：$fsdbDumpfile(\u0026quot;waveform.fsdb\u0026quot;);。 使用 $fsdbDumpvars 指定需要记录的信号，例如：$fsdbDumpvars(0, top_module);。 优点： 文件体积较小，支持高效的信号压缩，能够记录更多信息，适合大规模设计。 支持更复杂的信号类型和详细的信号数据，查看精度更高。 与Verdi等调试工具高度集成，能够使用强大的波形浏览、信号分析、故障定位等功能。 缺点： 是专有格式，需要专用工具（如Verdi）才能查看，兼容性相对较差。 生成FSDB文件可能需要消耗较多资源，仿真速度可能稍有影响。 使用建议： 在项目后期和复杂设计中使用FSDB格式，结合Verdi工具分析细致波形和交互关系。 利用Verdi的过滤和筛选功能查看关键信号，减少不必要的波形数据 "},{"id":5,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/vcs%E4%B8%8Everdi/%E5%AE%9E%E9%AA%8C/lab01/","title":"Lab01","section":"实验","content":"\r实验1 计数器\r#\r代码源文件 ：counter.v\n测试文件 ： counter_tb.v\n要VCS与Verdi联合仿真，需要在testbench里面加入``ifdef FSDB到endif`的代码，这样才能生成fsdb文件提供Verdi读取，不然不会输出波形\r实验步骤\r#\r使用vcs调用文件，对计数器进行功能仿真\n在Terminal输入代码并运行\nvcs -R -full64 +v2k -fsdb +define+FSDB -sverilog counte_tb.v counter.v timescale.v -l run.log 解释如下：\n-R：指示VCS在编译完成后自动运行仿真，简化了操作流程。 -full64：启用64位模式，适用于需要处理大数据或高性能计算的仿真。 +v2k：指定使用Verilog-2001标准，确保兼容2001年版本的Verilog语法。 -fsdb：启用FSDB格式支持，允许生成FSDB波形文件，以便配合Verdi等工具进行深入分析。 +define+FSDB：相当于在Verilog代码中增加 \\define FSDB`，可用于条件编译或配置相关设置。 -sverilog：支持SystemVerilog语法，这样可以混合使用Verilog和SystemVerilog进行设计与验证。 counter.v tb_counter.v timescale.v：需要编译和仿真的Verilog文件，可以按照任意顺序输入，不受文件顺序限制。 -l run.log：将终端输出的信息保存到 run.log 文件中，方便查看仿真日志和错误信息，避免终端信息丢失。 Terminal出现如下图，并且文件夹里生成了fsdb文件，说明编译仿真成功 接着我们可以用verdi来查看波形，在Terminal输入\nverdi 点击File -\u0026gt; import Design Language设置为Verilog-2001，接着在文件窗口选中需要的代码，点击右侧的+号，点击ok 接着按下图顺序操作\n到这里我们可以看到波形\n在波形窗口单击鼠标左键然后拖动可以缩放波形，然后按f键可以快速回到全局波形\n修改代码后，在terminal界面重新运行vcs命令\nvcs -R -full64 +v2k -fsdb +define+FSDB -sverilog -f main_counter.f -l run.log 接着在代码界面按shirt+L，可以快速刷新代码和波形\n"},{"id":6,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/vcs%E4%B8%8Everdi/%E5%AE%9E%E9%AA%8C/lab02/","title":"Lab02","section":"实验","content":"\r实验2 同步 FIFO 设计\r#\r实验内容\r#\r完成同步 FIFO（First-In-First-Out 数据缓存器）的设计，包括 Verilog 代码和测试文件验证。\n1. FIFO 介绍\r#\rFIFO 是一种先进先出的数据缓存器，与普通存储器的区别在于：\n没有外部读写地址线，操作简单。 只能顺序读写，不能随机访问。 1.1 FIFO 的应用场景\r#\r数据缓冲： 当数据写入速率过快或写入不连续时，FIFO 用于暂存数据，使后续处理流程平滑。 时钟域隔离（主要是异步 FIFO）： 用于跨时钟域数据传输，避免设计和约束复杂度。 例如：AD 端与 PCI 总线之间数据传输。AD 采样速率为 16 位 100KSPS（1.6Mbps），而 PCI 总线速度为 33MHz，32 位宽。 不同数据宽度的接口适配： 例如：单片机（8 位）与 DSP（16 位）之间的数据传输。 1.2 同步 FIFO\r#\r同步 FIFO 是指读时钟和写时钟为同一个时钟源。在时钟沿到来时，可同时进行读写操作。\n同步 FIFO 结构\r#\r同步 FIFO 的核心是双口 RAM和读写控制逻辑。\n+------------------+\ri_w_en -----\u0026gt; | | o_buf_full\ri_data -----\u0026gt; | FIFO 内核 | -------------------\u0026gt;\r| (双口 RAM) |\r| | o_buf_empty\ri_r_en -----\u0026gt; | | -------------------\u0026gt;\r+------------------+\r^ ^\r| |\r写指针 读指针 1.3 双口 RAM\r#\r双口 RAM（Dual-Port RAM）是一种支持两个独立端口的存储器，可以同时进行读操作和写操作。在同步 FIFO 设计中，双口 RAM 主要用于实现高效的数据存储和访问，其主要作用包括：\n同时读写：读和写操作可以在同一个时钟周期内独立进行，互不干扰。写指针控制写入数据，读指针控制读取数据。 避免冲突：双口 RAM 提供了两个独立的地址端口（一个用于写入、一个用于读取），因此能够避免传统单端口 RAM 只能分时读写的问题。 高效的数据缓存：FIFO 中的数据通过写指针依次写入双口 RAM，通过读指针顺序读出，确保数据先进先出（FIFO）的特性。 双端RAM的代码： module ram_dual(RST, CLK_R, CLK_W, RD_EN, WRT_EN, ADDR_R, ADDR_W, DATA_WRT, DATA_RD); parameter DATA_WIDTH = 8; parameter RAM_DEEP = 128; parameter ADDR_WIDTH = 7; input\tCLK_R; input\tCLK_W; input\tRST; input\tRD_EN; input\tWRT_EN; input\t[ADDR_WIDTH-1:0] ADDR_R; input\t[ADDR_WIDTH-1:0] ADDR_W; input\t[DATA_WIDTH-1:0] DATA_WRT; output\t[DATA_WIDTH-1:0] DATA_RD; reg\t[DATA_WIDTH-1:0] DATA_RD; reg\t[DATA_WIDTH-1:0] MEM\t[0:RAM_DEEP-1]; // reg\t[ADDR_WIDTH:0] i; // always @(posedge CLK_W or posedge RST) begin // if (RST) begin // for(i=0; i\u0026lt;RAM_DEEP; i=i+1) begin // MEM[i] \u0026lt;= 0; // // #0.001; // // $display(\u0026#34;iteration is %d\u0026#34;, i); // end // end // else if (WRT_EN) // MEM[ADDR_W] \u0026lt;= DATA_WRT; // end generate genvar i; for (i=0; i\u0026lt;RAM_DEEP; i=i+1) begin: MEM_GEN always @(posedge CLK_W or posedge RST) begin if (RST) MEM[i] \u0026lt;= 0; else if (WRT_EN) MEM[i] \u0026lt;= (ADDR_W == i) ? DATA_WRT : MEM[i]; end end endgenerate always @(posedge CLK_R or posedge RST) begin if (RST) DATA_RD \u0026lt;= 0; else if (RD_EN) DATA_RD \u0026lt;= MEM[ADDR_R]; end endmodule 1.4 FIFO 参数与信号定义\r#\r信号 说明 clk 系统时钟 rstn 系统复位信号（低电平有效） wr_en 写使能信号，控制数据写入 wr_data 写入数据 fifo_full FIFO 满标志位，表示 FIFO 已满 rd_en 读使能信号，控制数据读出 rd_data 读出数据 fifo_empty FIFO 空标志位，表示 FIFO 为空 读指针 指向下一个要读出的地址 写指针 指向下一个要写入的地址 1.5 FIFO 设计原则\r#\r写入溢出（Overflow）： 禁止在 FIFO 满时继续写入数据。 读取溢出（Underflow）： 禁止在 FIFO 为空时继续读取数据。 指针管理： FIFO 初始化时，读指针和写指针均指向地址 0。 每写入一个数据，写指针自动加 1；每读出一个数据，读指针自动加 1。 通过比较读、写指针状态，判断 FIFO 的空和满状态。 2. 同步 FIFO 基本接口定义\r#\rmodule sync_fifo#(parameter BUF_SIZE=？, BUF_WIDTH=？) ( input i_clk, // 系统时钟 input i_rst, // 复位信号 input i_w_en, // 写使能信号 input i_r_en, // 读使能信号 input [BUF_WIDTH-1:0] i_data, // 写入数据 output reg [BUF_WIDTH-1:0] o_data, // 读出数据 output o_buf_empty, // FIFO 空标志位 output o_buf_full // FIFO 满标志位 ); // 在此添加设计逻辑 endmodule 3. 设计实现要求\r#\r完成 sync_fifo 模块的 Verilog 代码设计，宽度为8，深度为8。 确保以下功能： 写入数据时，写指针自动更新。 读取数据时，读指针自动更新。 判断 FIFO 的空（o_buf_empty）和满（o_buf_full）状态。 编写测试文件（Testbench）验证设计。 最终检查：使用给定的 TB 文件验证设计的正确性。 4. 验证测试\r#\r给出测试文件的基本框架，可以使用以下 TB 文件来验证设计逻辑。\n示例 Testbench\r#\rmodule tb_sync_fifo; reg clk; reg rst; reg wr_en; reg rd_en; reg [7:0] wr_data; wire [7:0] rd_data; wire fifo_empty; wire fifo_full; // 实例化同步 FIFO 模块 sync_fifo uut ( .i_clk (clk), .i_rst (rst), .i_w_en (wr_en), .i_r_en (rd_en), .i_data (wr_data), .o_data (rd_data), .o_buf_empty (fifo_empty), .o_buf_full (fifo_full) ); // 时钟生成 always #5 clk = ~clk; initial begin // 初始化 clk = 0; rst = 1; wr_en = 0; rd_en = 0; wr_data = 8\u0026#39;h00; #10 rst = 0; // 释放复位 // 测试写入操作 repeat (10) begin @(posedge clk); wr_en = 1; wr_data = wr_data + 1; end wr_en = 0; // 测试读取操作 repeat (10) begin @(posedge clk); rd_en = 1; end rd_en = 0; #20 $finish; end endmodule 5. 任务总结\r#\r完成同步 FIFO 设计的基本逻辑。 实现了空、满状态的判断。 使用测试文件验证设计是否符合要求。 "},{"id":7,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/vcs%E4%B8%8Everdi/%E5%AE%9E%E9%AA%8C/lab03/","title":"Lab03","section":"实验","content":"\r实验3 异步FIFO\r#\r1. 异步FIFO概述\r#\r异步FIFO（Asynchronous FIFO）是一种跨时钟域的数据缓冲结构，适用于读写时钟不一致的场景。其主要特点是跨时钟域操作，并通过双口RAM和读写控制逻辑实现数据存储与传输。\n1.1 系统结构\r#\r异步FIFO的系统结构如下图所示：\n1.2 关键特性\r#\r跨时钟域：读写操作分别使用不同的时钟，频率、相位和来源可能不同。 数据完整性：解决异步时钟引起的亚稳态问题，保证数据传输的正确性。 空满指示：利用读写指针计算FIFO的状态，包括空、满、虚空与虚满状态。 2. 亚稳态问题及解决方案\r#\r2.1 亚稳态产生的原因\r#\r同步时钟场景\r#\r在同步时钟中，时钟上升沿与数据跳变不同步，时钟采样可以准确捕获数据值。\n异步时钟场景\r#\r当时钟与数据跳变时间不一致时，时钟上升沿可能正好落在数据跳变区域，导致以下问题：\n数据采样不确定：输出值可能为0、1或中间不稳定电平。 亚稳态传播：亚稳态可能影响后续电路的运行，导致系统不稳定。 2.2 解决方案\r#\r为解决亚稳态问题，常用的方法包括打两拍同步机制和格雷码编码。\n2.2.1 打两拍同步机制\r#\r通过两级D触发器对数据进行同步，减少亚稳态的传播概率。\n示意图：\nA时钟域 → Q1 → Q2 (B时钟域打2拍) → Q3\nQ1：数据进入目标时钟域的第一级触发器。 Q2：可能出现亚稳态，通过第二级D触发器进一步稳定。 Q3：数据在目标时钟域内安全使用。 优势：\n两级同步触发器大大降低了亚稳态的传播概率。 实现简单，硬件开销小。 2.2.2 使用格雷码编码\r#\r格雷码的特点是相邻数据只有1位发生变化，大大减少了亚稳态发生的概率。\n二进制跳变问题： 例如从3(0011)到4(0100)，有3位数据发生跳变，亚稳态发生概率较高。 格雷码跳变优势： 相邻数据只发生1位变化，降低了亚稳态出现的可能性。 二进制转格雷码方法： 将二进制数右移一位并与原数按位异或，得到格雷码。\n示例：\n十进制 二进制 格雷码 0 0000 0000 1 0001 0001 2 0010 0011 3 0011 0010 4 0100 0110 5 0101 0111 6 0110 0101 7 0111 0100 8 1000 1100 9 1001 1101 10 1010 1111 11 1011 1110 12 1100 1010 13 1101 1011 14 1110 1001 15 1111 1000 3. 空满状态判断\r#\r3.1 空状态判断\r#\r当读地址指针与写地址指针相等时，表示FIFO为空。\n3.2 满状态判断\r#\r当写地址指针即将追上读地址指针时，表示FIFO已满。\n3.3 虚空与虚满\r#\r虚空：写指针同步到读时钟域时存在延迟，导致判断为空时实际仍在写入数据。 虚满：读指针同步到写时钟域时存在延迟，导致判断为满时实际仍在读取数据。 解决方案：\n精确同步读写指针，减少误判。 增加保护机制，避免数据丢失或覆盖。 4. FIFO深度选择\r#\rFIFO的深度取决于读写速率的关系和数据传输的需求：\n写速率 \u0026gt; 读速率 需要根据连续写入的数据量（Burst Length）与读取数据量之间的差值，合理选择FIFO深度，以保证数据不会丢失。\n读速率 \u0026gt; 写速率 FIFO深度设置为1即可满足需求，因为数据读取速度快于写入速度。\n读写速率相同 FIFO深度设置为1即可保证数据传输的正确性。\n5. 异步 FIFO 基本接口定义\r#\r异步fifo的接口信号与同步fifo基本一致，但是要注意跨时钟域的处理。\nmodule async_fifo#(parameter BUF_SIZE=？, BUF_WIDTH=？) ( input i_clk, // 系统时钟 input i_rst, // 复位信号 input i_w_en, // 写使能信号 input i_r_en, // 读使能信号 input [BUF_WIDTH-1:0] i_data, // 写入数据 output reg [BUF_WIDTH-1:0] o_data, // 读出数据 output o_buf_empty, // FIFO 空标志位 output o_buf_full // FIFO 满标志位 ); // 在此添加设计逻辑 endmodule 6. 设计实现要求\r#\r完成 async_fifo 模块的 Verilog 代码设计,要求宽度为512，深度为10。 编写测试文件（Testbench）验证设计。 最终检查：使用给定的 TB 文件验证设计的正确性。 "},{"id":8,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/dc%E7%BB%BC%E5%90%88/%E8%AE%B2%E4%B9%89/","title":"讲义","section":"Dc综合","content":"\rDC综合\r#\r目标：\n使用DC完成逻辑网表生成 使用DC分析网表的质量 综合的介绍\r#\r什么是综合\r#\r综合（Synthesis）是将行为级的RTL代码在工艺、面积、时序等约束条件下，转化为相应的门级网表的过程。通过综合工具，将硬件设计从高层描述转化为门级电路，并且在这一过程中完成实现与优化工作。具体来说，综合是根据系统的逻辑功能和性能需求，在预先定义的单元库支持下，找到满足功能、速度和面积等要求的最佳逻辑网络结构。\n综合通常分为三个主要阶段：转换（translation）、优化（optimization）和映射（mapping）。\n转换（Translation）：在这一阶段，综合工具将高层描述的RTL代码转化为门级逻辑。例如，在Synopsys的Design Compiler（DC）中，这一步会使用gtech库中的门级单元来组成最初的逻辑结构，这些逻辑单元用于实现HDL中的设计描述，形成初步的门级电路。\n优化（Optimization）：在优化阶段，综合工具对初始生成的门级电路进行分析，移除冗余单元，并且对不满足设计约束的部分进行优化。这包括满足设计中的速度、面积和功耗等约束条件，确保电路符合预期性能。\n映射（Mapping）：经过优化的电路接下来会映射到指定的工艺库（由芯片制造商提供）上，使得设计与具体的技术工艺相适配。这一步将优化后的逻辑结构转化为具体的工艺单元，以实现最终的物理电路。\n综合工具通过这些步骤，将高层次的行为描述逐步转化为满足具体工艺库的逻辑电路，实现了从代码到硬件的有效转化。 常用工具 ：\nSynopsys: DC（用的较多） Candance：Genus 这里我们选用 Design Compiler 作为综合工具 综合需要的文件\r#\rRTL文件 标准单元的库文件 其他库文件。如IO库，IP库等等 不管是什么样子的综合工具，所需要的文件和吐出来的文件基本是一致的，但是里面文件的定义有时候不同，不同的工具可能需要不同格式的库文件\n综合输出的文件\r#\r综合后的门级网表 带时序约束信息的sdc文件 其他一些后端需要用的特殊配置，如dont_touch设置等 保留综合结果的ddc文件(之后可以直接load这个文件，查看综合结果) 综合输出的文件\r#\r门级网表文件 带时序约束的 SDC 文件 特殊配置文件：包含后端所需的特定设置，例如 dont_touch 属性，用于保护特定单元不被优化或更改。 DDC 文件：保存综合结果的 DDC（Design Compiler Database）文件。可以在之后直接加载这个文件，以便查看综合结果，或用于进一步的综合操作。 网表和 SDC 文件是后端设计中最关键的文件。具体来说：\n门级网表文件：这是综合工具生成的门级逻辑描述，后端使用它来进行版图设计。网表中包含了各个逻辑单元和它们之间的连接关系，是物理实现的基础。\nSDC 文件（时序约束文件）：SDC 文件包含了设计中的时序约束信息。后端设计需要这个文件来确保物理实现能够满足时序要求。例如，SDC 文件中通常会指定时钟频率、输入和输出延迟、时钟域的关系、复位等约束。后端工具根据这些约束来优化和调整电路，以达到所需的时序性能。\n此外，SDC 文件可能还包括：\n时钟约束：定义设计中的时钟源、时钟频率、时钟周期等。 输入/输出延迟：用于指定端口的延迟要求，帮助后端在布线时确保时序闭合。 多时钟域约束：定义不同时钟域之间的时序关系，确保多时钟域设计的稳定性和可靠性。 生成时钟（Generated Clocks）：用于描述从主时钟派生的次级时钟，这对于后端工具准确进行时序分析非常重要。 这些约束信息有助于后端工具在实现物理布局和布线时，调整逻辑单元的位置和连线，确保时序要求得到满足。最终，门级网表和 SDC 文件一起使得后端工具能够在满足时序、面积和功耗等设计目标的前提下，生成符合工艺库约束的芯片版图。\n综合的基本流程\r#\r两种启动DC方式\r#\rdc_shell:命令行方式 dc_shell （一般模式） 使用wlm(wire load model)模式来计算连线延迟 dc_shell -topo （拓扑模式） 读取物理信息来计算连线延迟，一般推荐topo模式 design_vision:图形化界面方式 基本不用） 在项目的早期阶段主要使用wlm模式来综合，因为这个时候还没有通过innovus进行布局布线，项目的后期，当器件位置基本确定了，有了物理信息，使用拓扑模式进行综合，效果更好。 后面的命令都是在dc_shell命令的基础上运行的\nDC综合的流程\r#\r第一步、导入库文件\r#\r导入的库文件为时序库文件，用于描述物理单元的时序和功耗信息的重要库文件 时序库文件有.db格式和.lib格式，其中.db文件不可读取，保密性更好\n每个库文件主要包括：\n物理单元库的基本属性 单元库名称、单元库版本以及生产日期等 定义电压、电流、电容等 定义电路的传输延时和信号的转换时间的电压百分比 每个单元的具体时序与功耗信息 什么是转换时间？\n数字电路中信号从一个逻辑电平转换到另一个逻辑电平所需的时间。大部分旧工艺的库（0.25um或者更旧）使用10%和90%作为转换时间的阈值，这是根据波形翻转的线性区域而定的，随着工艺的进步，波形的线性区域从10%到90%变为30%到70%。所以目前大部分工艺库使用30%和70%作为转换时间的阈值测量点\n什么是传播延时？\n器件延时也称为传播延时（propagation delay），通过输入信号电压变化的50%到输出信号电压变化50%所需要的时间来定义门传播延时的大小，如图中的时间T\n工具是如何在lib文件中得到各类延迟的值？\nLook up table 二维查找表\ntable_template(delay_template_2x2) {\rvariable_1: total_output_net_capacitance;\rvariable_2: input_net_transition;\rindex_1 (“10.0, 11.0”);\rindex_2 (“10.0, 11.0”);\r}\rfall_transition(delay_template_2x2) {\rindex_1 (“0.1500, 0.1950”);\rindex_2 (“0.0275, 0.03580”);\rvalues(“0.1906, 0.2338”, \\\r“0.1908, 0.2338”\r} index_1代表行，index_2代表列，工具通过这两个对应的数，来查找lib中的表，确定延时的值\n如何计算一个cell的延迟大小？\n二维查找表时需要知道两个值\n输入pin的input transition\n输出pin的output load\n我们这里用的是SAED 32/28nm的库\n在综合和时序分析中，时序库的精度直接影响时序结果的准确性。时序库有多种模型来描述标准单元的延时和功耗特性，其中NDLM（Nonlinear Delay Model） 和 CCS（Composite Current Source） 是两种常见的延时模型。它们在不同的分析阶段、精度要求和特性描述上有所不同，理解它们的区别有助于选择合适的模型进行设计。下面是对这两种模型的补充说明。\n1. NDLM（Nonlinear Delay Model，非线性延迟模型）\r#\rNDLM是一种传统的查找表模型，它基于非线性函数，通过查找表（lookup table, LUT）来描述标准单元在不同输入条件下的延时特性。具体来说，NDLM模型使用单元的输入转换时间（slew）和输出负载电容（load capacitance）作为查找表的索引，来计算相应的延时和输出转换时间。\n工作原理： NDLM 通过两个2D查找表来描述单元延时：\n延时表（delay table）：给出输入信号传播延时，输入是输入的转换时间和输出负载电容。 转换时间表（slew table）：给出输出信号的转换时间，同样以输入转换时间和输出负载电容为输入。 优点：\n简单、高效，计算速度快。 在综合阶段广泛使用，因为模型相对简单，能快速估算设计的时序特性。 缺点：\n对于信号完整性和复杂的电气效应（如电压降、噪声效应等）描述不够精确。 对实际电流波形的捕捉较弱，只能近似描述延时和转换时间。 在精确的时序分析中可能出现误差，尤其在先进工艺节点下。 2. CCS（Composite Current Source，复合电流源模型）\r#\rCCS 是一种基于电流源的时序和功耗模型，相比NDLM，CCS更加精确，特别适合用来描述复杂的电气效应和信号完整性问题。CCS模型不仅考虑了延时和转换时间，还考虑了电流波形和电压波形的变化，以便在更复杂的设计条件下进行精确的时序和功耗分析。\n工作原理： CCS 使用电流波形和电容效应来描述标准单元的行为。它模拟输入信号的电流响应来计算延时和转换时间，因此可以精确地描述诸如过冲（overshoot）、下冲（undershoot）、噪声等复杂现象。\nCCS-Timing：用于描述时序的精确模型。它不仅考虑输入转换时间和输出负载电容，还基于电流和电压波形的细粒度模拟来推算延时和转换时间。\nCCS-Noise：用于分析信号完整性问题，能更精确地捕捉噪声效应。\nCCS-Power：用于功耗分析，精确模拟电流波形可以更准确地计算动态功耗和漏电流。\n优点：\n高精度：CCS 模型能够更精确地捕捉复杂电气效应，例如电流波形、电压波形的变化，适合用于高级时序和信号完整性分析。 对复杂的工艺条件和信号完整性问题（如 IR drop、噪声等）具有更好的支持。 在深亚微米工艺和FinFET等先进工艺节点下，能更好地捕捉真实的电气行为。 缺点：\n计算复杂度较高，因此分析速度相比NDLM较慢，特别是在综合阶段，CCS不如NDLM高效。 对设计资源的消耗较大（更多计算时间和存储空间）。 3. NDLM 与 CCS 的对比\r#\r特性 NDLM CCS 模型基础 基于查找表（lookup table） 基于电流源和电流波形 描述内容 仅描述延时和转换时间 描述电流波形、时序、功耗、噪声 精度 中等精度，适合简单时序分析 高精度，适合复杂电气效应分析 分析速度 快速，适合综合阶段使用 较慢，适合物理设计和精确时序分析 适用场景 综合阶段、早期设计 时序优化、物理设计、信号完整性分析 工艺适应性 对深亚微米工艺和先进工艺支持较弱 对先进工艺有很好的支持 4. NDLM 和 CCS 在设计中的应用\r#\r综合阶段：通常使用NDLM模型，因为它计算速度快，能够快速对设计进行时序分析并生成符合基本时序约束的网表。这时候，线延时是基于估算的，所以使用NDLM的简单模型就足够。\n物理设计阶段：在布局布线完成后，线延时精确可知，因此需要更高精度的时序分析。此时，CCS模型通过模拟电流、电压波形，可以捕捉电路中的电气效应，如过冲、反射、噪声等。这种精确的分析对于高级工艺节点（如FinFET）下尤为重要。\n信号完整性和功耗分析：在设计的后期阶段，特别是对于复杂设计，CCS模型由于能够模拟电流波形的变化，还可以用来进行噪声分析和功耗分析，从而帮助优化电源分配和减少功耗。\nNDLM和CCS模型在设计综合和时序分析中的应用各有侧重：\nNDLM模型：适合在早期综合阶段使用，因为其计算速度快，能快速给出基本的时序估算，特别是在综合阶段，不需要考虑复杂的电气效应。\nCCS模型：则适合用于后期物理设计和优化阶段，因为它提供了更高的精度，尤其是在深亚微米工艺和先进工艺节点中，通过模拟电流和电压波形，能够更好地进行时序、功耗和噪声的综合分析。\n我们这里选用ndlm的库作为综合的库\n我们以下面这个库为例 saed32rvt_ss0p75v25c.db\n在32/28纳米技术节点中，功耗和时序性能是设计工程师特别重视的关键指标。通过将多阈值电压设计引入综合流程，能够有效提升芯片的整体表现。\n每种单元库的性能都可以通过PVT角（工艺、电压、温度，即Process, Voltage, Temperature）进行表征，以确保在不同制造条件和工作环境下对芯片的性能进行全面评估。\n表征角\r#\r条件 工艺 - 工艺 电压 (V) 温度 (℃) ttlp05v25c Typical-Typical 0.75 25 ttlp05v125c Typical-Typical 0.75 125 ttlp05vn40c Typical-Typical 0.75 -40 ss0p75v25c slow - slow 0.75 25 ss0p75v125c slow - slow 0.75 125 ff0p85v25c fast - fast 0.85 25 ff0p85v125c fast - fast 0.85 125 ff0p85vn40c fast - fast 0.85 -40 工艺\r#\rSlow-Slow (SS) 表示工艺角度较差，代表最慢的性能和最低的功耗。 Fast-Fast (FF) 表示工艺角度最佳，意味着最高性能，但也可能伴随较高的功耗。 Typical-Typical (TT) 是工艺的标准条件，代表最常见的制造条件。 电压\r#\r其中“saed32”后面的部分代表电压阈值的分类标签。根据不同的电压阈值，所有单元库可分为以下三种类型：\n高电压阈值（HVT）：HVT单元主要用于降低漏电功耗，但其面积相对较大。 低电压阈值（LVT）：LVT单元具有最快的速度，适合用于对时序要求严格的设计场合。 常规电压阈值（RVT）：RVT单元的性能和功耗介于HVT和LVT之间，属于折中选择。 通常电压越高。器件的delay越小\r#\r温度\r#\r一般情况下，器件的delay是随着温度的升高而增大 但是随着工艺尺寸的降低，关于器件延迟与温度的关系，存在温度反转效应，即随着温度的降低，delay增大\n在Design Compiler（DC综合）中进行设计时，选择合适的库来进行时序和功耗的权衡至关重要。通常情况下，在综合阶段我们会选择最慢的库，这是为了在后续的优化流程中预留足够的设计余量。所以我们一般选用ss0p75vn40c来进行综合。\n为什么选用最慢的库\n因为综合阶段的线延时是基于估算的，并不是物理设计之后的精确布线延时，我们在这个时候只要关注setup时序(hold时序可以在后期通过添加buff修复），所以为了给后续的设计留足裕量，我们一般选用最慢的库来保证能满足setup的时序要求。\n确定了使用的库文件，接下来是具体的设置\n设置search path\ndc_shell\u0026gt; set search_path [list \\ ./ \\ ../ \\ XXX/XX \\ ] 软件会在serch path的目录下搜索文件，简化了路径的编写\n设置target library和link library Target library（目标库）：一般指标准单元库，是DC用来做综合映射的目标库\nLink library（链接库）：门级网表实例化的参考库，设计中的所有单元都来自于link library。link library除了标准单元以外，还包含IO库文件，IP库文件等\n在 link_library 的设置中必须包含\u0026quot;*\u0026quot;， 表示 DC 在引用实例化模块 或者单元电路时首先搜索已经调进DC memory的模块和单元电路，如果在link library 中不包含\u0026quot;*\u0026quot;，DC 就不会使用 DC memory 中已有的模块，因此，会出现无法匹配的模块或单元电路的警告信息(unresolved design reference)。\n如何设置target_library和link_library？\ndc_shell\u0026gt; set target_library [list saed32hvt_ss0p75vn40c.db] dc_shell\u0026gt; set link_library [list \u0026#34;*\u0026#34; saed32hvt_ss0p75vn40c.db] 第二步、读取RTL\r#\rDC支持多种RTL语言，包括verilog、VHDL等 在使用 Design Compiler 进行综合时，我们有两种常见的方式来读取 RTL 文件： read_verilog和analyze \u0026amp; elaborate\n方法1：read_verilog dc_shell\u0026gt; read_verilog rtl_file1.v dc_shell\u0026gt; read_verilog rtl_file2.v 或者\ndc_shell\u0026gt; read_verilog {rtl_file1.v rtl_file2.v} current_design XXX（XXX代表top module的名字），这个命令用来告诉DC去综合哪个模块。\n接下来输入\ndc_shell\u0026gt; current_design MY_TOP current_design XXX（XXX代表top module的名字），这个命令用来告诉DC去综合哪个模块。\n接下来使用link链接工艺库，通过输入命令\ndc_shell\u0026gt; link 导入link library，通过这个命令让工具去检查，设计里的所有设计对象，都有对应的时序模型。\n方法2：通过analyze \u0026amp; elaborate\n除了read_verilog，我们还可以使用analyze和elaborate命令来完成文件的读取和模块展开。 dc_shell\u0026gt; analyze -format verilog my_design.v dc_shell\u0026gt; elaborate top_module 通过这种方式，也可以读取system verilog等其它的RTL，只要替换-format后的为sverilog等其它形式的语言。elaborate这个命令包含了current_design和link的功能，所以我们不用再去执行current_design和link操作。 并且elaborate是唯一在读取设计的时候修改参数的方法 比如说我们在代码里面定义了两个参数\nmodule TOP (A, B, C ···); parameter A_width 3; parameter B_width 5; input [A_width-1:0] A; input [B_width-1:0] B; ······· 然后我们可以通过\ndc_shell\u0026gt; elaborate TOP -parameters \u0026#34;A_width=5, B_width=16\u0026#34; 来修改参数，这些参数的值会覆盖RTL代码中的默认参数值，但是我们一般不推荐通过这种方法去修改参数，因为这样不能保证代码的一致性，不容易查错。\n第三步、读取约束文件\r#\r这一步是读取SDC文件，SDC 全称：Set Design Constraints主要用于：定义时序约束（如时钟、延迟、多周期路径、假路径等）和物理约束（如面积等），指导设计工具进行优化和分析。\n在集成电路设计流程中，RTL代码主要描述了电路的逻辑功能，包括寄存器之间和输入/输出端口之间的组合逻辑。然而，RTL代码并没有明确涉及到设计中的时序信息和物理信息，例如路径的延时和电路面积。为了弥补这些信息的缺失，设计师会通过SDC文件来为设计提供时序和物理约束。\nSDC文件是基于Tcl（Tool Command Language）的约束文件格式，它的主要有两类设计约束：\n设计约束主要分为两类：\n1. 设计规则约束\n设计规则约束是基于特定工艺的限制，要求设计必须满足这些规则才能确保功能正常。这些约束通常与制造工艺相关，如线宽、间距、电压要求等。 大多数技术库（Technology Library）都会预先定义默认的设计规则，这些规则是根据制造工艺的能力和限制制定的。 虽然可以在设计中应用比默认更严格的规则，但不能使用比默认规则更宽松的要求。这确保了设计的可制造性和功能性。 2. 设计时序与面积约束\n常见的优化目标包括时序（速度）和面积。 在大多数情况下，时序约束优先于面积约束，即优先确保设计能够满足速度要求，随后再考虑面积的最小化。但优先级可以根据需求进行调整。 时序约束的前提是满足设计规则约束，也就是说，优化是建立在符合工艺要求的基础上进行的，不能违背基本的设计规则。 下面是两种约束的具体命令与介绍： 首先我们要了解一些基础的命令：\nget_design 功能： get_design 用于获取当前设计的模块名称。通常在进行设计综合时，我们需要知道当前模块的名称，以便进行后续的优化和约束操作。\n*例子：\ndc_shell\u0026gt; get_design 输出： 当前设计的顶层模块名称。\nget_clock 功能： get_clock 用于获取设计中定义的时钟信号。在时序分析和时钟约束时，时钟是一个非常关键的元素。通过这个命令，可以找到已经创建的时钟名称。\n例子：\ndc_shell\u0026gt; get_clock my_clock 输出： 时钟 my_clock 的信息。\nget_pins 功能： get_pins 获取实例化模块中连接的具体针脚（pin）。这些针脚对应了逻辑单元中的输入和输出。例如，实例化后的模块可能包含多个输入输出端口，get_pins 命令可以用于查询这些端口内部的实际连接。\n例子：\ndc_shell\u0026gt; get_pins sum_u2/a 输出： 获取实例化单元 sum_u2 的 a 端口。\nget_ports 功能： get_ports 用于获取当前模块的端口（port）。端口是模块的外部接口，主要用于和其他模块通信。通过该命令可以列出当前模块的所有输入输出端口。\n例子：\ndc_shell\u0026gt; get_ports in1 输出： 获取当前模块的 in1 端口。\nget_net 功能： get_net 用于获取设计中的信号线（net）。在电路设计中，net 代表了连接在一起的各个针脚或端口之间的电气连接。get_net 可以帮助我们定位某条信号线的具体名称，这对时序分析和布线非常重要。\n例子：\ndc_shell\u0026gt; get_net my_net 输出： 获取信号线 my_net 的信息。\nget_cell 功能： get_cell 获取设计中实例化的单元（cell）。这些单元通常是库中的基本逻辑单元（如与门、或门等）或更高级的模块，实例化后有独立的名字。get_cell 可以帮助我们定位这些实例化的逻辑单元。\n例子：\ndc_shell\u0026gt; get_cell U111 输出： 获取实例化单元 U111 的信息。\nPin 与 Port 的相对性\nPort 通常是指模块的外部接口，它定义了模块与外部其他模块或电路的连接点。 Pin 是指模块内部单元（cell）的连接点，通常是逻辑单元的输入或输出。 它们的区别在于上下文的不同。当我们讨论顶层模块时，端口（port）指的是模块的输入输出接口；而在实例化模块内部时，这些端口可能会作为内部单元的针脚（pin）来处理。因此，pin 和 port 是相对而言的，根据设计的层次结构和观察的视角不同，可能是相同的物理连接点，但在不同上下文中名称有所不同。\n例子 比如我们有一段代码\nmodule top_module ( input wire clk, // 时钟信号 input wire in1, // 输入信号1 input wire in2, // 输入信号2 output wire out // 输出信号 ); wire sum; // 内部信号，用于连接实例化模块的输出 // 实例化一个加法器模块 (adder_u1)，将输入 in1 和 in2 相加，并将结果传给 sum adder adder_u1 ( .a(in1), // 输入a，连接顶层输入in1 .b(in2), // 输入b，连接顶层输入in2 .sum(sum) // 输出sum，连接到内部信号sum ); // 将内部信号sum赋值给顶层输出out assign out = sum; endmodule // 定义加法器模块 module adder ( input wire a, // 加法器的输入a input wire b, // 加法器的输入b output wire sum // 加法器的输出sum ); // 执行逻辑加法操作 assign sum = a + b; endmodule 假设我们有一个设计模块 top_module，其输入端口为 in1 和 in2，输出端口为 out，并且内部实例化了一个加法器模块 adder_u1，它的输入端口为 .a, .b，输出端口为 sum。我们还定义了一个时钟信号 clk。\n获取当前设计模块： dc_shell\u0026gt; get_design 输出： top_module\n获取时钟信号： dc_shell\u0026gt; get_clock clk 输出： clk 的时钟信息。\n获取内部实例化的针脚： dc_shell\u0026gt; get_pins adder_u1/a 输出： adder_u1 模块的 a 端口。\n获取顶层模块的端口： dc_shell\u0026gt; get_ports in1 输出： 顶层模块的 in1 端口。\n获取信号线： dc_shell\u0026gt; get_net net_1 输出： net_1 信号线的信息。\n获取实例化单元： dc_shell\u0026gt; get_cell adder_u1 输出： 实例化的加法器 adder_u1 的信息。\n通过这些命令，你可以轻松查询和管理设计中的模块、端口、针脚、时钟和信号线等信息，以实现对电路设计的全方位控制。\n接下来是具体的规则设置：\n设计规则约束\r#\r1. Maximum capacitance (最大电容)\ndc_shell\u0026gt; set_max_capacitance cap_value port_list 这是一个针脚级别的属性，用于定义一个输出管脚可以驱动的最大总电容负载。 2. Maximum transition (最大转换时间)\ndc_shell\u0026gt; set_max_transition trans_value port_list 从理论上来说，只要输入电平变化了，不管输出带了多大的负载，经过一段时间，总是能够使输出电 平变化的，但是上升或下降时间长就意味着电路的速度很慢。 定义一个网络的最大转换时间，这是驱动管脚改变逻辑值所需的最长时间。 3. Maximum fan-out (最大扇出)\ndc_shell\u0026gt; set_max_fanout value port_list 一个网络的最大扇出负载是该网络可以驱动的最大负载数量。如果库中存在扇出约束，并且指定了最大扇出属性，设计编译器会尝试满足最严格的要求。 设计时序与面积约束\r#\r1.创建时钟 用于定义时钟的周期和波形。 命令：\ndc_shell\u0026gt; create_clock -name \u0026#34;clk name\u0026#34; source_objects \\ -period period_value -waveform {rise fall} source_objects： 时钟应用的针脚或端口列表。 -period period_value： 时钟波形的周期，单位为库中的时间单位。 -waveform 选项： 设置上升沿和下降沿的时间。如果不指定波形，默认波形为50%的占空比。 示例： dc_shell\u0026gt; set cycle 10.0 dc_shell\u0026gt; create_clock -name \u0026#34;clk_1\u0026#34; [get_ports clk_1] -period $cycle -waveform {0 5} #因为库里的时间单位是ns，所以这里创建了一个占空比为50%的100Mhz的时钟 这样我们就创建了一个时钟，但是这样的时钟是理想的，我们可以添加一些设置来让时钟更接近实际的情况。\n1.1时钟延迟 (Clock latency) 用来定义时钟到寄存器的延时\n网络延迟（Network latency)：从时钟引脚到寄存器时钟引脚的延迟 dc_shell\u0026gt; set_clock_latency delay [get_clocks clk] #设置时钟的延迟。 dc_shell\u0026gt; set_clock_latency -fall delay [get_clocks clk] #设置时钟下降沿的延迟。 dc_shell\u0026gt; set_clock_latency -rise delay [get_clocks clk] #设置时钟上升沿的延迟。 源延迟 (Source latency)：从时钟源到时钟引脚的延迟 dc_shell\u0026gt; set_clock_latency delay -source [get_clocks CLK] #设置从时钟源到时钟引脚的延迟。 dc_shell\u0026gt; set_clock_latency delay -source -early [get_clocks CLK] #设置用于建立时间（setup time）检查的时钟源延迟。 dc_shell\u0026gt; set_clock_latency delay -source -late [get_clocks CLK] #设置用于保持时间（hold time）检查的时钟源延迟。 例子： dc_shell\u0026gt; set_clock_latency –source 2.0 CLK dc_shell\u0026gt; set_clock_latency 1.0 CLK 1.2.时钟不确定性 (Clock uncertainty，偏斜 Skew)\n寄存器处时钟信号到达的最大差异 这里的uncertainty一般由时钟的抖动（jitter）+ setup或者hold margin组成\n建立时间（Setup Time）与保持时间（Hold Time）\n建立时间是指数据端信号在时钟有效边沿到达之前必须提前到达的最小时间。 保持时间是指在时钟有效边沿之后，数据端信号必须保持稳定的最小时间。 这两个参数由工艺库提供，确保数据信号能够被正确读取并存储。 时钟树或多个时钟域导致的延迟差异\n单时钟不确定性（Single clock uncertainty）\ndc_shell\u0026gt; set_clock_uncertainty delay [get_clocks CLK] #设定单个时钟的不确定性延迟。 跨时钟不确定性（Interclock uncertainty）\ndc_shell\u0026gt; set_clock_uncertainty delay -from [get_clocks CLK1] -to [get_clocks CLK2] #设定从时钟域1到时钟域2的跨时钟不确定性延迟。 例子 dc_shell\u0026gt; set_clock_uncertainty -setup 0.5 CLK1 dc_shell\u0026gt; set_clock_uncertainty -hold 0.3 CLK1 1.3. 转换时间 (Transition time)\n信号从低到高或从高到低变化所需的时间，输入的转换时间影响输出延迟和输出的转换时间\ndc_shell\u0026gt; set_clock_transition delay [get_clocks CLK] #设置时钟的转换时间（从低电平到高电平或从高电平到低电平的切换时间）。 dc_shell\u0026gt; set_clock_transition delay -fall [get_clocks CLK] #仅设置时钟下降沿的转换时间。 dc_shell\u0026gt; set_clock_transition delay -rise [get_clocks CLK] #仅设置时钟上升沿的转换时间。 2.输入与输出延时\n在数字电路设计中，set_input_delay 和 set_output_delay 命令用于定义输入和输出信号在模块之间的允许到达时间，特别是在路径跨越模块边界时。这些命令确保信号在时钟有效边沿到达时序单元，从而满足设定的时序要求。\ndc_shell\u0026gt; set_input_delay -clock clk_name -max max_value -min min_value dc_shell\u0026gt; set_output_delay -clock clk_name -max max_value -min min_value 2.1. -max 选项\n此选项用于指定输入或输出信号的最大延迟，以满足时序单元的建立时间要求。这意味着信号必须在时钟边沿之前的特定时间内到达，以确保数据的有效性。 2.2. -min 选项\n此选项用于指定输入或输出信号的最小延迟，以满足时序单元的保持时间要求。这确保了在时钟有效边沿之后，数据在一段时间内不会改变，从而避免读取错误。 2.3. 输入与输出延迟的计算\n输入与输出路径的最大延迟限制了信号到达的最晚时刻，必须根据时序单元的时序要求进行计算。通过合理设置最大和最小延迟，可以有效控制信号的时序行为，从而确保整个设计的时序可靠性。 一般设置：在实际设计中，通常将输入与输出延时设置为时钟周期的60%。这一设置帮助优化电路性能，确保信号在规定的时间范围内正确到达。\n3.组合电路多周期路径约束\n一个时序路径，它的信号传播不要求在一个时钟周期内完成。通常，所有路径都被限制为单周期时序。多周期路径是默认单周期时序的例外情况。设置多周期路径是为了指示编译器允许数据沿路径传播时使用多个时钟周期\ndc_shell\u0026gt; set_multicycle_path path_multiplier –from $start_point –to $end_point [-setup] [-hold] [-start] [-end] 选项定义：\npath_multiplier: 指定周期数量\n$start_point: 指定多周期路径的起始点（时钟、端口、引脚或单元）\n$end_point: 指定多周期路径的终点（端口、引脚或基本单元）\n-setup: 用于设置时间计算\n-hold: 用于保持时间计算\n-start: (时钟发射边)(保持检查默认)：指示多周期信息相对于起始时钟\n-end: (时钟捕获边)(设置检查默认)：指示多周期信息相对于终止时钟\n4.设置false路径\n在异步电路中，时序关系由协议保证，因此用户在设计时需要确保电路正常工作。为此，用户必须明确指出跨越异步电路的路径，以便优化工具能够正确处理这些路径。\ndc_shell\u0026gt; set_false_path -from source -to destination set_false_path 命令用于在电路设计中标识那些不需要考虑的路径，这些路径通常是异步电路的路径或者逻辑上不存在的路径。在综合和优化过程中，对这些路径的时序限制将被忽略，从而提高综合工具的优化效率。\n示例\ndc_shell\u0026gt; set_false_path -from write_en -to read_en 这条命令表示在优化过程中，综合工具将忽略从 write_en 到 read_en 的路径的所有时序限制。 在使用不同时钟源的情况下，某些信号路径被视为异步路径。例如，如果 CLKA 和 CLKB 属于不同的时钟晶振，可以使用以下命令：\ndc_shell\u0026gt; set_false_path -from [get_clocks CLKA] -to [get_clocks CLKB] 这条命令表明 CLKA 到 CLKB 的路径是异步的，优化工具在处理该路径时将不会考虑其时序约束。\n5.设置面积约束\n在集成电路设计中，芯片面积与成本直接相关，面积越大，制造成本越高。因此，设计师通常希望尽量减小芯片面积，以降低整体成本。set_max_area 命令用于限制综合过程中电路的面积，以优化设计。\ndc_shell\u0026gt; set_max_area area_value 如果将 max_area 设置为 0，综合工具将不会满足面积要求，但会尽量优化电路以达到可能的最小面积。这种情况下，虽然综合后的电路面积最小化，但电路的“弹性”会受到限制，可能会影响后续的设计修改和性能优化。\n完成sdc文件之后，采用source或者read_sdc命令读入sdc文件\ndc_shell\u0026gt; source top.sdc dc_shell\u0026gt; read_sdc top.sdc 推荐使用source命令来读取sdc文件，因为read_sdc不识别remove_from_collection等的tcl命令\n第四步、设计综合\r#\r我们已经有了RTL代码、时序库与约束文件，综合需要的文件已经准备完成，接下来就是进行设计综合。DC综合命令：\ndc_shell\u0026gt; scompile_ultra 采用该命令可以让DC开始执行综合过程，综合执行三级的优化：\n架构级（Architectural-level）或高层次综合（high level synthesis） 由于芯片的架构都是确定的，所以在架构级工具优化起来不是那么容易，但是工具也会尽力去优化一部分电路，让整体效率更高，速度更快。 逻辑级（Logic-level）或GTECH优化 工具会尽可能使用简单的逻辑去进行综合，减少电路的面积与级数。 门级（Gate-level）or映射优化 工具会尽可能的去优化每一个cell的面积与时序。 在满足时序和其它约束时，工具也会尝试最小化面积\n对于compile_ultra命令，有一些常见的综合参数设置：\n关键路径重点优化 通过grop_path, 并提升path group的weight权重 dc_shell\u0026gt; group_path –name INPUTS –from [all_inputs] –weight 1 dc_shell\u0026gt; group_path –name OUTPUTS –to [all_outputs] –weight 1 dc_shell\u0026gt; group_path –name REG2REG –from [all_registers] –to [all_registers] 3 dc_shell\u0026gt; group_path –name CLK –to CLK_A –weight 5 #将权重5应用于关键的路径（比如timing较差的group） #将权重2应用于其他的关键的路径（reg to reg） #默认权重为1分配给所有其他路径（例如不准确的I/O路劲） 打平优化 compile_ultra默认启用打平优化，如果想关闭，可以添加–no_autongroup， 比如现在有3个module，A和B是top底下的module，由于综合的时候，不同的module处于不同的文件，不同的电路模块就会形成不同的层次结构，在综合时候，由于这种层次的存在，所以工具会尽可能的优化同一个层次的结构，层次与层次之间的电路，虽然说他们是同一条路劲，但因为不是同一个层次，那他们之间的优化效果可能就不是很好，所以在综合的时候使用compile_ultra，工具就会把电路的所有层次去掉，他就是将全部都放到一起，就不存在这种边界的问题了，由于这种边界消失了，就是说大家都放到一起了，那么这种优化出来的时序就会更好一些了，但是采用这种方式虽然有优点，但是缺点也比较明显，就是因为去掉了层次结构，那么前端工程师来看做好的代码，就不是很容易看出对应的关系，因为cell的名字变了，就不知道这个cell是由哪个verilog文件变的，不利于做ECO\n边界优化 dc_shell\u0026gt; compile_ultra –no_boundary_optimization 边界优化，类似于刚才的打平优化，将模块之间的边界模糊化，模糊化之后呢，也是时序和面积会更好，但是缺点和打平优化一样，不方便后期的修改\n寄存器复制 dc_shell\u0026gt; compile_ultra –timing 寄存器复制，也叫clone，比如说现在有一i个寄存器后面连接了200个寄存器，那么连了200个寄存器之后，就会导致他的时序路劲很长，中间也可能有很多的buffer，那么他的时序路径很长的话，他的setup就不是很好满足，这种情况下，这个命令就可以让工具复制出几份一模一样的寄存器，也就是把原来的200个进行分组，分组之后呢，寄存器之后的fanout少了，这样就可以解决由于fanout过大带来的timing的问题\nICG优化 dc_shell\u0026gt; compile_ultra –gate ICG同样可以采用clone和declone的形式去优化，比如如果ICG的fanout过大，同样会导致timing的问题，同样采用clone的操作去复制几个一模一样的寄存器分别去挂不同的负载，减少fanout数目，解决时序问题，然后delone就是一些ICG后面的fanout过少，由于ICG的面积还是挺大的，这样就会导致面积上的浪费，比如说工具认为这两个ICG合在一起是没有问题的，那么就会把他们合在一起，来减少面积\ndc_shell\u0026gt; set_clock_gating_check –setup 0.02 然后我们可以采用set_clock_gating_check进一步优化ICG的timing，通过这样的一个操作让ICG的EN端的timing检查变得更严格，工具就会去加强这一块的优化，让它的timng更容易满足要求，我们在STA的时候会有一个问题，clock_gate上会有一个EN端，EN端打开的时候，clock就会从ICG穿过去，如果EN是0的话，后面就是恒定的低电平，EN端前面一般是一个寄存器去控制的，这个时候会出现一个特殊的时序路径，就是reg到ICG的路径，而在后端设计里面，这个reg到ICG的路劲是十分不好满足的，也就是在我们设计过程中，如果设计没什么的问题的话，最后的时序问题一般都是reg到ICG的时序路劲的问题，这里面就涉及到为什么reg到ICG的路劲不好满足， 首先就是这个clock_gate在时钟树中的位置， 他是处于别的东西的时钟路径上的，他是控制后面的寄存器后者其他一些东西的时钟的开与关，所以它肯定是在时钟树的前面，也就是ICG上的时钟天生要比寄存器的时钟短了一截，而ICG的EN又是由一个寄存器控制的，这个寄存器的时钟树一般是要和别的进行balance的，ICG的时钟是capture_clock ， 那么capture_clock 越长对setup越有利，由于它的时钟天生比reg的短一些，所以他的时序就更难满足\n增强优化 dc_shell\u0026gt; compile_ultra –incremental 增强优化，它做的是在当前的基础上继续进行优化，也就是说工具会采取之前的那些优化策略继续优化,\n优化面积 dc_shell\u0026gt; optimize_netlist 优化面积，采用这个命令可以在不影响时序的基础上，在非关键路径上选用尺寸小的单元或者优化逻辑，进一步减少面积，这些也就是传统的逻辑综合用的优化策列和优化方法。\n第五步、设计分析\r#\rdc_shell\u0026gt; check_design 用check_design检查设计中是否存在其他隐患问题\ndc_shell\u0026gt; check_timing 用check_timing检查设计中是否有路径没有被约束，每一条路径都应该约束到，如果真的有哪一条不需要约束也应该设置成false path。\ndc_shell\u0026gt; report_qor 用report_qor查看整体综合后的summary结果\ndc_shell\u0026gt; report_area 用report_area查看综合后得到的面积\ndc_shell\u0026gt; report_timing 用report_timing查看具体的setup/hold时序信息。 具体案例分析\n我们可以先看qor报告，首先关注时序，其次是面积，对于timing的情况，我们主要看Critical Path Slack、Total Negative Slack和No. of Violation Path这三个值，综合阶段不一定要修完所有的Violation，因为这个阶段的线延迟是不准的，只要结果不会超过太多，可以不修。 接着可以看report_timing出来的具体报告，进一步分析最差的path的情况\n第六步、文件输出\r#\r保存网表 dc_shell\u0026gt; write_file -f verilog -output xxx.v 保存ddc文件 dc_shell\u0026gt; write_file -f ddc -output xxx.ddc dc_shell\u0026gt; read_ddc xxx.ddc ddc文件是dc的数据格式，保存后下次可以直接加载查看结果。不需要重新综合。可以通过read_ddc命令直接读取 3.写出综合后的sdf文件\ndc_shell\u0026gt; write_sdc xxx.sdc "},{"id":9,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/dc%E7%BB%BC%E5%90%88/%E5%AE%9E%E9%AA%8C/lab01/","title":"Lab01","section":"实验","content":"\r实验1：异步 FIFO 的综合\r#\r目标\n完成 DC 综合的 TCL 脚本，并对 VCS 实验2的 FIFO 进行综合。\nDC 综合的流程\r#\r导入库文件 → 读取 RTL → 读取约束文件 → 设计综合 → 设计分析 → 文件输出\n约束文件的内容\r#\r参数描述 数值/设置 读时钟频率 100 MHz 写时钟频率 50 MHz 时钟抖动 50 ps Setup 预留 50 ps 上升/下降过渡时间（最坏情况） 120 ps 时钟发生器到设计 CLK 端口最大延时 500 ps 异步时钟组 读写时钟 最大转换时间限制 150 ps 输入延迟（DATA_WRT 相对 CLK_W） 3 ns 输入延迟（RD_EN 相对 CLK_R 最大值） 5 ns 输入延迟（RD_EN 相对 CLK_R 最小值） 2 ns 输出延迟（DATA_RD* 相对 CLK_R） 1 ns 在满足时序要求的情况下，通过优化手段尽量减小面积。 遇到不熟悉的命令时，可以通过 `man` 命令进行查询。\r"},{"id":10,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/fm%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81/%E8%AE%B2%E4%B9%89/","title":"讲义","section":"Fm形式验证","content":"\r形式验证\r#\r形式验证介绍\r#\r在IC设计中，需要通过DC工具将设计的RTL代码转换为网表，为了验证所生成的网表与RTL的功能是否一致，需要进行形式验证，形式验证是一种等价性检查。 它是一种静态的比较，会遍历所有的组合保证逻辑等价性。\n形式验证的位置\r#\r只要设计发生改变(对代码进行改动)\n综合的网表与RTL对比做形式验证。保证综合过程没有逻辑错误。保证综合后的网表正确。 后端网表与综合后的网表对比做形式验证。保证后端没有引入逻辑错误。 做ECO的时候，ECO后的网表与ECO后的RTL做形式验证。（ECO当芯片已经流片出去了，工厂只做了一个底层，但金属层还没做可以做metalECO，发现某些容易修的bug后可以利用一些冗余的cell改变某些连线来修掉这个Bug，修改后端网表的同时对RTL也进行相应修改，然后将这两个文件进行LEC比较） 形式验证的流程\r#\r1.读取综合产生的svf文件,一般在综合的目录下自动生成。 注意：只有对比综合前的RTL和综合后的网表时候需要这一步 在terminal输入fm_shell进入形式验证的环境，之后的命令都是在此环境中运行\nset_svf xxx.svf 2.读入时序库文件\nread_db -r xxx.db #时序 3.读取RTL文件并设置顶层\nread_verilog -r xxx.v ;# Reference RTL file set_top xxx 4.读取参与比较的网表文件并设置顶层\nread_verilog -i xxx.v ;# Implementation Gate level file set_top xxx 5.进行匹配与对比\nmatch verify 6.输出报告\nreport_guidance -summary \u0026gt; RPT/summary.rpt report_failing \u0026gt; RPT/failing.rpt "},{"id":11,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/fm%E5%BD%A2%E5%BC%8F%E9%AA%8C%E8%AF%81/%E5%AE%9E%E9%AA%8C/","title":"实验","section":"Fm形式验证","content":"\r实验1\r#\r使用上诉命令对DC实验综合出来的fifo进行形式验证 等到做完PR之后再次进行形式验证，确保逻辑一致\n"},{"id":12,"href":"/docs/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1/pt%E9%9D%99%E6%80%81%E6%97%B6%E5%BA%8F%E5%88%86%E6%9E%90/%E8%AE%B2%E4%B9%89/","title":"讲义","section":"Pt静态时序分析","content":"\r静态时序分析\r#\rSTA概述\r#\r静态时序分析（STA）是通过工具对同步电路中所有存在的时序路径进行分析，检查是否存在时序违例，是标准的timing Sign off方法 主要都是针对同步电路 时序的验证方法:\n动态时序分析（Dynamic timing simulation） 静态时序分析（Static Timing Analysis） 动态时序分析（Dynamic Timing Analysis, DTA）\r#\r方法特点： 基于仿真方法，通过施加具体输入测试向量，验证设计在特定条件下的时序行为。 需要设计功能和测试向量的配合。 优势： 功能覆盖：能够验证特定输入条件下的时序行为。 精确性：仿真电路的真实响应，能发现实际条件下的潜在问题。 劣势： 依赖测试向量：质量（覆盖率）取决于输入测试向量的全面性。 仿真时间长：随着测试向量数量增加，仿真时间显著增长。 适用场景： 用于验证复杂场景下的时序问题。 适合后仿真阶段的功能和时序联合验证。 静态时序分析（Static Timing Analysis, STA）\r#\r方法特点： 采用穷举型逻辑，通过计算电路中所有可能路径的时序约束来验证设计的时序完整性。 不需要特定输入向量，独立于信号值。 优势： 全面性：STA 对设计中的所有路径进行分析，确保所有时序检查无遗漏（如 setup/hold 检查）。 效率高：不需要仿真输入，分析速度快，特别适合大规模设计。 角点分析：可以在不同 PVT（工艺、温度、电压）角点快速分析。 适用场景： 用于设计的早期和后期阶段进行全面的时序验证。 适合检查所有可能的时序路径。 对比总结\r#\r特性 静态时序分析（STA） 动态时序分析（DTA） 输入依赖 无需具体测试向量 需要测试向量 分析范围 全面，覆盖所有路径 受测试向量覆盖率限制 分析速度 快 慢 验证场景 适合早期验证，分析所有角点 适合特定功能验证和实际条件下 所以，STA就是套用特定的模型，针对特定的电路在给定的时序约束上面分析设计是否有时序违例，所以进行STA一般需要3个文件\n时序模型 ：lib文件 特定的电路 ： Netlist文件 给定的时序约束 ： sdc文件 常用的工具有 Synopsys: Prime Time（常用） Cadence: Tempus\n本教程选用Prime Time作为时序分析的工具\nSTA分析流程\r#\rPT和DC综合的过程和命令都是十分相似的，与综合过程中对时序检查的区别：PT使用的是更加精准的时序模型，并且使用PT做STA会对所有的corner，也就是工艺角去分析，而综合一般只做一两个corner\ngraph TD\rA[导入时序文件] --\u0026gt;B[创建时序路径] --\u0026gt;C[设置时序分析模式]--\u0026gt;D[设置时序分析参数]--\u0026gt;E[产生时序报告]--\u0026gt;F[保存时序]--\u0026gt;G[时序修复]--\u0026gt;H[产生sdf] 我们通过在terminal输入\npt_shell 使用Prime Time的命令\n第一步、读入文件\r#\rSTA需要读入的基本文件有：\n时序约束文件：sdc文件，里面是关于时序的各种约束 工艺库的时序模型：工艺库时序lib文件 逻辑综合的网表和spef文件等 ：DC综合产生的门级网表与RC提取的spef文件 工艺库的时序模型\r#\r时序分析的路径\r#\r对于静态时序分析来说，一条路径上的时序大致由3部分组成：\nCell delay ：信号通过每个cell花费的时间 Net delay ：每个cell的连线中的delay Cell check time ： 检查单元是否满足时序要求时所需要考虑的特定时间。包括两个方面：Setup Time（建立时间）、Hold Time（保持时间） 什么是Setup Time和Hold Time？\nSetup time：逻辑单元（通常是触发器或寄存器）要求输入信号在时钟沿到来之前，必须提前稳定的时间。这是为了确保信号在时钟沿到达时被正确捕获。\nHold Time：指信号在时钟沿到达之后，必须保持稳定的时间窗口，以避免数据丢失。\n首先我们来了解一下什么是时序弧，在计算路径延时的时候，工具是把每一条路径分成时序弧（timing arcs）来计算\n如果两个pin之间的timing存在因果关系，那么我们就把这种时序的关系叫做时序弧（timing arcs），主要分为定义时序延迟和定义时序检查两种。 每个cell的时序弧定义在lib文件里面，net之间没有时序弧，因为他们的延时是由RC参数计算出来的。\n时序延迟是描述信号在电路中传播的时间，通常分为以下几种类型：\n组合逻辑延迟（Combinational Logic Delay） 时序逻辑延迟（Sequential Logic Delay） 三态门逻辑延迟（Tri-state Logic Delay） 组合逻辑延迟：\r#\r组合逻辑延迟指的是信号在组合逻辑电路中传播所需的时间。组合逻辑电路的输出只依赖于当前输入的状态，不依赖于过去的状态，因此其时序延迟主要由电路内部的门延迟（如与门、或门、非门等）决定。 组合逻辑延迟可以按照输入输出信号的变化进行分类，主要包括：\nPositive unate：输入输出信号变化相同 Negative unate：输入输出信号变化相反 non unate：输出信号不由输入决定 时序逻辑延迟\r#\r时序单元延迟，定义时序器件的时钟引脚到达输出端口的延迟，叫做边缘时序弧（Edge Timing arc）\n三态门逻辑延迟\r#\r三态门（Tri-state Gate）是一种具有三个状态（高电平、低电平、三态）输出的逻辑门。在数字电路中，三态门的输出可以是高电平、低电平或者高阻抗状态（Z）。当输出处于高阻抗状态时，它相当于被断开，不对电路造成影响。 三态门逻辑延迟定义三态门组件使能信号到输出的延时时间\n"},{"id":13,"href":"/docs/%E5%90%8E%E7%AB%AF%E8%AE%BE%E8%AE%A1/","title":"后端设计","section":"Docs","content":"\rIntroduction\r#\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad\r#\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\rTrepident sitimque\r#\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":14,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates\r#\rGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax\r#\rGolang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\rParameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\rMethods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\rParentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\rVariables\r#\rEach Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\rVariables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\rFunctions\r#\rGo template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\rIncludes\r#\rWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\rLogic\r#\rGo templates provide the most basic iteration and conditional logic.\nIteration\r#\rJust like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\rExample 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\rExample 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\rConditionals\r#\rIf, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\rExample 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\rExample 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rExample 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\rExample 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\rPipes\r#\rOne of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\ris the same as\n{{ eq 1 1 | if }} Same {{ end }}\rIt does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\rAccess the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\rCould be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\rContext (aka. the dot)\r#\rThe most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\rNotice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters\r#\rHugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters\r#\rIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026#34;Permalinks\u0026#34;\rdate: \u0026#34;2013-11-18\u0026#34;\raliases:\r- \u0026#34;/doc/permalinks/\u0026#34;\rgroups: [\u0026#34;extras\u0026#34;]\rgroups_weight: 30\rnotoc: true\r--- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\rUsing Site (config) Parameters\r#\rIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34;\ralt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt; "},{"id":15,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"\rStep 1. Install Hugo\r#\rGo to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs\r#\rHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\rOnce you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site\r#\rStop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\rOpen your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\rRefresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun\r#\rThe best way to learn something is to play with it.\n"},{"id":16,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"\rButtons\r#\rButtons are styled links that can lead to local page or external link.\nExample\r#\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home\rContribute\r"},{"id":17,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"\rColumns\r#\rColumns help organize shorter pieces of content horizontally for readability.\nExample\r#\r{{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns\r#\r{{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":18,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"\rDetails\r#\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r{{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Title\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\n"},{"id":19,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"\rHints\r#\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example\r#\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":20,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"\rMermaid Chart\r#\rMermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample\r#\r{{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2\rState1: The state with a note\rnote right of State1\rImportant information! You can write\rnotes.\rend note\rState1 --\u003e State2\rnote left of State2 : This is the note to the left.\r"},{"id":21,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"\rSection\r#\rSection renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample\r#\r{{\u0026lt; section [summary] \u0026gt;}} First Page\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nSecond Page\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":22,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":23,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":24,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"\rTabs\r#\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{% tabs %}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{% /tabs %}} Example\r#\rMacOS\rMacOS\r#\rThis is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux\r#\rThis is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows\r#\rThis is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":25,"href":"/docs/%E4%BB%8B%E7%BB%8D/hidden/","title":"Hidden","section":"介绍","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\rFronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "},{"id":26,"href":"/docs/%E5%90%8E%E7%AB%AF%E8%AE%BE%E8%AE%A1/hidden/","title":"Hidden","section":"后端设计","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\rFronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "},{"id":27,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":"\rKaTeX\r#\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r{{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rDisplay Mode Example\r#\rHere is some inline example: \\(\\pi(x)\\)\r, rendered in the same line. And below is display example, having display: block \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rText continues here.\n"}]